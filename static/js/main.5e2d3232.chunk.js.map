{"version":3,"sources":["components/Post.js","components/User.js","components/Comment.js","components/CommentList.js","components/PostList.js","utils/helper.js","App.js","serviceWorker.js","index.js"],"names":["Post","_ref","post","react_default","a","createElement","User","id","user","users","find","Fragment","Comment","comments","filter","comment","map","className","CommentList","components_Comment","PostList","posts","components_Post","components_User","components_CommentList","getPosts","fetch","then","res","json","getUsers","getComments","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getData","asyncToGenerator","regenerator_default","mark","_callee","_ref2","_ref3","wrap","_context","prev","next","Promise","all","sent","slicedToArray","setState","isLoading","setTimeout","completeLoad","stop","sort","event","updatePosts","toConsumableArray","state","target","value","copyPost","objectSpread","b","localeCompare","_ref4","_callee2","searchText","filteredPosts","_context2","toLowerCase","t0","t1","includes","_x","apply","arguments","_this2","onChange","type","onClick","components_PostList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5e2d3232.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Post({post}) {\r\n    return <li>{post[\"id\"]+\": \"+post[\"title\"]}\r\n    </li>\r\n}\r\nexport default Post;","import React from 'react';\r\n\r\nfunction User({id, users}){\r\n        const user = users.find(user=>user['id']=== id);\r\n        return <>\r\n                <li>{user['name']}</li>\r\n                <li>{user['email']}</li>\r\n                <li>{user['address'][\"street\"]+ \" \" +\r\n                user['address'][\"suite\"]+ \" \" +\r\n                user['address'][\"city\"]+ \" \" +\r\n                user['address'][\"zipcode\"]\r\n                }</li>\r\n              </>\r\n}\r\nexport default User;","import React from 'react';\r\n\r\nfunction Comment({id, comments}) {\r\n\r\n    const comment = comments.filter(comment=>comment['postId']===id);\r\n\r\n    return comment.map(comment=>{\r\n       return <li className={\"post__comment\"}>{\"name: \" + comment['name']}\r\n                <span className={\"post__comment-body\"}>{comment['body']}</span>\r\n                <span className={\"post__comment-email\"}>{\"email: \"+comment['email']}</span>\r\n            </li>\r\n    })\r\n\r\n}\r\nexport default Comment;","import React from 'react';\r\nimport Comment from './Comment';\r\n\r\nfunction CommentList({id, comments}) {\r\n\r\n    return <ul className={\"post__comments\"}>\r\n        {<Comment id={id} comments={comments}/>}\r\n        </ul>\r\n}\r\nexport default CommentList;","import React from 'react';\r\nimport Post from './Post';\r\nimport User from './User';\r\nimport CommentList from './CommentList';\r\n\r\nfunction PostList({posts, users, comments }) {\r\n\r\n\r\n    return <ul className={\"post__list\"}>\r\n        {posts.map(post=>{\r\n        return<>\r\n            <Post post={post}/>\r\n            <User id={post['userId']} users={users} />\r\n            <span className={\"post__comments-readmore\"}>{\"comments...\"}</span>\r\n            <CommentList id={post['id'] } comments={comments}/>\r\n        </>\r\n         })\r\n       }\r\n    </ul>\r\n}\r\n\r\nexport default PostList;","const getPosts = () => {\r\n    return fetch('https://jsonplaceholder.typicode.com/posts')\r\n        .then(res => res.json());\r\n};\r\n\r\nconst getUsers = () => {\r\n    return fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(res => res.json());\r\n};\r\n\r\nconst getComments = () => {\r\n    return fetch('https://jsonplaceholder.typicode.com/comments')\r\n        .then(res => res.json());\r\n};\r\n\r\nexport  { getPosts, getUsers, getComments };","import React, { Component } from 'react';\nimport PostList from './components/PostList';\nimport { getPosts, getUsers, getComments } from './utils/helper';\nimport './App.css';\n\nclass App extends Component{\n\n  constructor(){\n    super();\n    this.state={\n      posts:[],\n      users:[],\n      comments:[],\n      isLoading: false,\n      completeLoad: false,\n    };\n  }\n\n\n  getData = async ()=>{\n    const [posts, users, comments] = await Promise.all([\n        getPosts(),\n        getUsers() ,\n        getComments(),\n    ]);\n\n      this.setState({isLoading: true});\n\n      setTimeout(()=>{\n          this.setState({\n              posts: posts,\n              users: users,\n              comments: comments,\n              completeLoad: true\n          });\n      },2000)\n  };\n\n  sort =(event)=> {\n      const posts = [...this.state.posts];\n      const users = this.state.users;\n      let updatePosts;\n\n      switch (event.target.value){\n                case 'name':\n                    updatePosts = posts.map((post)=> {\n                                 const user = users.find((user)=>user[\"id\"]===post['userId']),\n                                       copyPost = {...post};\n                                 copyPost['userName']= user['name'];\n                                 return copyPost;\n                                  })\n                                  .sort(function (a, b) {\n                                    return  a['userName'].localeCompare(b['userName'])\n                                  });\n                    break;\n\n                case 'id': updatePosts = posts.sort((a, b)=>a['id']-b['id']);\n                    break;\n\n                case 'title': updatePosts = posts.sort((a, b)=>a['title'].localeCompare(b['title']));\n                    break;\n\n                default:\n                    return;\n      }\n\n      this.setState({posts:  updatePosts})\n  };\n\n   filter =  async(event)=> {\n        let searchText = event.target.value.toLowerCase(),\n           filteredPosts;\n        const posts = [...await getPosts()];\n        if(event){\n            filteredPosts = posts.filter(post => post['title'].toLowerCase().includes(searchText));\n        }else {\n            filteredPosts = posts;\n        }\n        this.setState({posts: filteredPosts});\n    };\n\n  render(){\n\n      return (\n          <div className=\"App\">\n              <header className=\"App-header\">\n                  <h1>Dynamic List Of Posts</h1>\n              </header>\n\n             <div className={\"App-nav\"}>\n                 {!this.state.completeLoad?<button\n                         className={\"btn-load\"}\n                         onClick={this.getData}\n                     >{!this.state.isLoading?\"Load\": \"Loading...\"}</button>:\n                     <>\n                     <select  onChange={(event)=>{this.sort(event)}}>\n\n                         <option value=\"id\">Sorted By Id</option>\n                         <option value=\"name\">Sorted By User Name</option>\n                         <option value=\"title\">Sorted By Text</option>\n\n                     </select>\n\n                     <input className={\"search\"}\n                            type={\"text\"}\n                            onChange={(event)=>this.filter(event)}\n                     />\n                     </>\n                 }\n             </div>\n\n              <main>\n                  <PostList\n                  posts={this.state.posts}\n                  users={this.state.users}\n                  comments={this.state.comments}\n                  />\n              </main>\n          </div>\n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}