{"version":3,"sources":["components/User.js","components/Comment.js","components/CommentList.js","components/Post.js","components/PostList.js","utils/helper.js","App.js","serviceWorker.js","index.js"],"names":["User","_ref","user","react_default","a","createElement","className","concat","Comment","postId","comment","CommentList","comments","map","index","components_Comment","key","Post","post","components_CommentList","components_User","PostList","posts","commentsPost","components_Post","getPosts","fetch","then","res","json","getUsers","getComments","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getData","asyncToGenerator","regenerator_default","mark","_callee","_ref2","_ref3","users","updatePosts","wrap","_context","prev","next","Promise","all","sent","slicedToArray","objectSpread","find","filter","setState","prevState","visiblePosts","completeLoad","stop","preparePosts","_this$state","state","sortField","searchText","query","toLowerCase","filteredPosts","includes","toConsumableArray","sort","id","b","title","localeCompare","name","event","target","value","Fragment","onChange","type","onClick","isLoading","components_PostList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.38128386.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction User({user}){\r\n\r\n        return <ul className={\"post-info\"}>\r\n                <li>{`author: ${user['name']}`}</li>\r\n                <li>{`email: ${user['email']}`}</li>\r\n                <li>{`\r\n                      address: ${user['address'][\"street\"]}\r\n                      ${user['address'][\"suite\" ]}\r\n                      ${user['address'][\"city\"]}\r\n                      ${user['address'][\"zipcode\"]}\r\n                     `}\r\n                </li>\r\n              </ul>\r\n}\r\nexport default User;","import React from 'react';\r\n\r\nfunction Comment({postId, comment}) {\r\n\r\n       return <li className={\"post__comment\"}>{\"name: \" + comment['name']}\r\n                <span className={\"post__comment-body\"}>{comment['body']}</span>\r\n                <span className={\"post__comment-email\"}>{\"email: \"+comment['email']}</span>\r\n            </li>\r\n}\r\nexport default Comment;","import React from 'react';\r\nimport Comment from './Comment';\r\n\r\nfunction CommentList({comments}) {\r\n\r\n    return <ul className={\"post__comments\"}>\r\n             {comments.map((comment, index)=> <Comment\r\n               key={index}\r\n               comment={comment}/>)}\r\n           </ul>\r\n}\r\nexport default CommentList;","import React from 'react';\r\nimport User from './User';\r\nimport CommentList from './CommentList';\r\n\r\nfunction Post({post, user , comments , index}) {\r\n\r\n    return <li key={index}> {post[\"id\"]+\": \"+post[\"title\"]}\r\n            <span className={\"post__comments-readmore\"}>{\"comments...\"}</span>\r\n            <CommentList comments = {comments}/>\r\n            <User user={user} />\r\n          </li>\r\n}\r\nexport default Post;","import React from 'react';\r\nimport Post from './Post';\r\n\r\nfunction PostList({posts}) {\r\n    return <ul className={\"post__list\"}>\r\n             {posts.map((post, index)=>{\r\n             const user = post.user;\r\n             const comments = post.commentsPost;\r\n\r\n              return  <Post\r\n                 key={index}\r\n                 user={user}\r\n                 post={post}\r\n                 comments={comments}\r\n               />}\r\n             )\r\n             }\r\n           </ul>\r\n}\r\n\r\nexport default PostList;","const getPosts = () => {\r\n    return fetch('https://jsonplaceholder.typicode.com/posts')\r\n        .then(res => res.json());\r\n};\r\n\r\nconst getUsers = () => {\r\n    return fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(res => res.json());\r\n};\r\n\r\nconst getComments = () => {\r\n    return fetch('https://jsonplaceholder.typicode.com/comments')\r\n        .then(res => res.json());\r\n};\r\n\r\nexport  { getPosts, getUsers, getComments };","import React, { Component } from \"react\";\nimport PostList from \"./components/PostList\";\nimport { getPosts, getUsers, getComments } from \"./utils/helper\";\nimport \"./App.scss\";\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      query: '',\n      sortField: '',\n      posts: [],\n      visiblePosts: [],\n      completeLoad: false\n    };\n  }\n\n  getData = async () => {\n    const [posts, users, comments] = await Promise.all([\n      getPosts(),\n      getUsers(),\n      getComments()\n    ]);\n\n    const updatePosts = posts.map(post => ({\n      ...post,\n      user: users.find((user) => user[\"id\"] === post[\"userId\"]),\n      commentsPost: comments.filter(commentsPost=>commentsPost['postId']===post['id'])\n    }));\n\n    this.setState(prevState=>({\n      ...prevState,\n      posts: updatePosts,\n      visiblePosts: updatePosts,\n      completeLoad: !prevState.completeLoad,\n      }));\n\n  };\n\n  preparePosts = () => {\n     const { posts,  sortField, query} = this.state;\n     const searchText = query.toLowerCase();\n\n     const filteredPosts = posts.filter(post =>\n       post[\"title\"].toLowerCase().includes(searchText));\n\n     const callbackMap = {\n       'id': (a, b) => (a.id - b.id),\n       'title': (a, b) => a.title.localeCompare(b.title),\n       'user': (a, b) => a.user.name.localeCompare(b.user.name),\n     };\n     return { visiblePosts: [...filteredPosts].sort(callbackMap[sortField]) }\n  };\n\n  sort = (event)=>{\n    this.setState(\n      {sortField: event.target.value,} ,\n      ()=>this.setState(this.preparePosts)\n      );\n\n  };\n\n  filter = (event) => {\n    this.setState({query: event.target.value },\n      ()=>this.setState(this.preparePosts)\n    );\n  };\n\n  render() {\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Dynamic List Of Posts</h1>\n        </header>\n        <div className={\"App-nav\"}>\n          {!this.state.completeLoad ? <button\n              className={\"btn-load\"}\n              onClick={this.getData}\n            >{!this.state.isLoading ? \"Load\" : \"Loading...\"}\n            </button> :\n            <>\n              <select onChange={this.sort}>\n                <option value=\"id\">Sorted By Id</option>\n                <option value=\"title\">Sorted By Text</option>\n                <option value=\"user\">Sorted By User Name</option>\n              </select>\n\n              <input className={\"search\"}\n                     type={\"text\"}\n                     onChange={this.filter}\n              />\n            </>\n          }\n        </div>\n        <main>\n          <PostList\n            posts={this.state.visiblePosts}\n          />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}