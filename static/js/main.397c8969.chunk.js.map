{"version":3,"sources":["components/User.js","components/Comment.js","components/CommentList.js","components/Post.js","components/PostList.js","utils/helper.js","App.js","serviceWorker.js","index.js"],"names":["User","_ref","id","user","users","find","react_default","a","createElement","className","concat","Comment","postId","comment","CommentList","comments","filter","map","components_Comment","Post","post","index","key","components_User","components_CommentList","PostList","posts","components_Post","getPosts","fetch","then","res","json","getUsers","getComments","sortByName","copyPost","Object","objectSpread","sort","b","localeCompare","sortByTitle","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getData","asyncToGenerator","regenerator_default","mark","_callee","_ref2","_ref3","wrap","_context","prev","next","Promise","all","sent","slicedToArray","setState","isLoading","setTimeout","completeLoad","visiblePosts","toConsumableArray","stop","event","sortItemsMap","state","name","title","target","value","searchText","toLowerCase","filteredPosts","includes","Fragment","onChange","type","onClick","components_PostList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.397c8969.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction User({id, users}){\r\n        const user = users.find(user=>user['id']=== id);\r\n        return <div className={\"post-info\"}>\r\n                <li>{`author: ${user['name']}`}</li>\r\n                <li>{`email: ${user['email']}`}</li>\r\n                <li>{`\r\n                      address: ${user['address'][\"street\"]}\r\n                      ${user['address'][\"suite\" ]}\r\n                      ${user['address'][\"city\"]}\r\n                      ${user['address'][\"zipcode\"]}\r\n                     `}\r\n                </li>\r\n              </div>\r\n}\r\nexport default User;","import React from 'react';\r\n\r\nfunction Comment({postId, comment}) {\r\n\r\n       return <li className={\"post__comment\"}>{\"name: \" + comment['name']}\r\n                <span className={\"post__comment-body\"}>{comment['body']}</span>\r\n                <span className={\"post__comment-email\"}>{\"email: \"+comment['email']}</span>\r\n            </li>\r\n}\r\nexport default Comment;","import React from 'react';\r\nimport Comment from './Comment';\r\n\r\nfunction CommentList({postId, comments}) {\r\n\r\n    const comment =  comments.filter((comment)=>comment['postId'] === postId);\r\n\r\n    return <ul className={\"post__comments\"}>\r\n             {comment.map((comment)=> <Comment comment={comment}/>)}\r\n           </ul>\r\n}\r\nexport default CommentList;","import React from 'react';\r\nimport User from './User';\r\nimport CommentList from './CommentList';\r\n\r\nfunction Post({post , users , comments , index}) {\r\n\r\n    return <li key={index}> {post[\"id\"]+\": \"+post[\"title\"]}\r\n            <User id={post['userId']} users={users} />\r\n            <span className={\"post__comments-readmore\"}>{\"comments...\"}</span>\r\n            <CommentList postId={post['id'] } comments={comments}/>\r\n         </li>\r\n}\r\nexport default Post;","import React from 'react';\r\nimport Post from './Post';\r\n\r\nfunction PostList({posts, users, comments }) {\r\n    return <ul className={\"post__list\"}>\r\n             {posts.map((post, index)=><Post\r\n                                index={index}\r\n                                users={users}\r\n                                post={post}\r\n                                comments={comments}\r\n                              />\r\n             )}\r\n           </ul>\r\n}\r\n\r\nexport default PostList;","const getPosts = () => {\r\n    return fetch('https://jsonplaceholder.typicode.com/posts')\r\n        .then(res => res.json());\r\n};\r\n\r\nconst getUsers = () => {\r\n    return fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(res => res.json());\r\n};\r\n\r\nconst getComments = () => {\r\n    return fetch('https://jsonplaceholder.typicode.com/comments')\r\n        .then(res => res.json());\r\n};\r\n\r\nexport  { getPosts, getUsers, getComments };","import React, { Component } from \"react\";\nimport PostList from \"./components/PostList\";\nimport { getPosts, getUsers, getComments } from \"./utils/helper\";\nimport \"./App.css\";\n\nfunction sortByName(posts, users) {\n  return posts.map((post) => {\n    const user = users.find((user) => user[\"id\"] === post[\"userId\"]),\n      copyPost = { ...post };\n    copyPost[\"userName\"] = user[\"name\"];\n    return copyPost;\n  }).sort((a, b) => a[\"userName\"].localeCompare(b[\"userName\"]));\n}\n\nfunction sortByTitle(posts) {\n  return posts.sort((a, b) => a[\"title\"].localeCompare(b[\"title\"]));\n}\n\nfunction sortById(posts) {\n  return posts.sort((a, b) => a[\"id\"] - b[\"id\"]);\n}\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      posts: [],\n      users: [],\n      comments: [],\n      visiblePosts: [],\n      isLoading: false,\n      completeLoad: false\n    };\n  }\n\n  getData = async () => {\n    const [posts, users, comments] = await Promise.all([\n      getPosts(),\n      getUsers(),\n      getComments()\n    ]);\n\n    this.setState({ isLoading: true });\n\n    setTimeout(() => {\n      this.setState({\n        posts: posts,\n        users: users,\n        comments: comments,\n        completeLoad: true,\n        visiblePosts: [...posts]\n      });\n    }, 1000);\n  };\n\n  sort = (event) => {\n    const sortItemsMap = {\n      \"id\": sortById([...this.state.visiblePosts]),\n      \"name\": sortByName([...this.state.visiblePosts], [...this.state.users]),\n      \"title\": sortByTitle([...this.state.visiblePosts])\n    };\n\n    this.setState({ visiblePosts: sortItemsMap[event.target.value] });\n  };\n\n  filter = (event) => {\n    let searchText = event.target.value.toLowerCase();\n    const filteredPosts = this.state.posts.filter(post => post[\"title\"].toLowerCase().includes(searchText));\n    this.setState({ visiblePosts: filteredPosts });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Dynamic List Of Posts</h1>\n        </header>\n        <div className={\"App-nav\"}>\n          {!this.state.completeLoad ? <button\n              className={\"btn-load\"}\n              onClick={this.getData}\n            >{!this.state.isLoading ? \"Load\" : \"Loading...\"}\n            </button> :\n            <>\n              <select onChange={this.sort}>\n                <option value=\"id\">Sorted By Id</option>\n                <option value=\"name\">Sorted By User Name</option>\n                <option value=\"title\">Sorted By Text</option>\n              </select>\n              <input className={\"search\"}\n                     type={\"text\"}\n                     onChange={this.filter}\n              />\n            </>\n          }\n        </div>\n        <main>\n          <PostList\n            posts={this.state.visiblePosts}\n            users={this.state.users}\n            comments={this.state.comments}\n          />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}